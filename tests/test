#!/usr/bin/env bash

export JSLINTR_ROOT=${JSLINTR_ROOT:-$(pwd -P)}
export JSLINTR_SRC="$JSLINTR_ROOT/src/"
export FIXTURES=${JSLINTR_ROOT}/tests/fixtures
export JSLINTR="/tmp/_jslintr/jslintr"

function _jslintr () {
	local PARAMS="$@"
	local OUT=$($JSLINTR $PARAMS)
	
	echo $OUT
}

function has_pattern_in_string () {
	local PATTERN=${1}
	local STRING=${2}
	
	local RES=$(echo $STRING | grep -q "$PATTERN" && echo 1)
	
	echo $RES
}

oneTimeTearDown () {
    rm tests/fixtures/*.tap
}

export USAGE_MESSAGE=" Usage: jslintr \[\-v\|\-\-verbose\] \[\-o|\-\-options options_file\] \[\-tap target_tap_file\] target_path"
test_jslintr_should_show_usage_when_called_without_params () {

	local OUTPUT=$(_jslintr)
	local RESULT=$(has_pattern_in_string "$USAGE_MESSAGE" "$OUTPUT")
	assertTrue "'JSLintr should show usage when called without parameters" "[ $RESULT ]"
}

test_jslintr_should_show_usage_when_called_without_target () {
	
	local OUTPUT=$(_jslintr -v)
	local RESULT=$(has_pattern_in_string "$USAGE_MESSAGE" "$OUTPUT")
	assertTrue "'JSLintr should show usage when called without parameters" "[ $RESULT ]"
	
	local OUTPUT=$(_jslintr --verbose)
	local RESULT=$(has_pattern_in_string "$USAGE_MESSAGE" "$OUTPUT")
	assertTrue "'JSLintr should show usage when called without parameters" "[ $RESULT ]"
}

test_jslintr_should_work_with_a_single_file () {

	local OUTPUT=$(_jslintr "-o $FIXTURES/jslintoptions $FIXTURES/js_sample_ok.js")
    # echo "=========="
    # echo $OUTPUT
    # echo "=========="
	
	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Done!" "$OUTPUT")
	assertTrue "'JSLintr closed ok" "[ $HAS_DONE ]"
}

test_jslintr_should_work_with_a_single_file_in_verbose_mode () {

	local OUTPUT=$(_jslintr "-o $FIXTURES/jslintoptions -v $FIXTURES/js_sample_ok.js")
    # echo "=========="
    # echo $OUTPUT
    # echo "=========="
	
	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_STARTING=$(has_pattern_in_string "tests\/fixtures\/js\_sample\_ok\.js\:" "$OUTPUT")
	assertTrue "'JSLintr should show success file" "[ $HAS_STARTING ]"
	
	local HAS_STARTING=$(has_pattern_in_string "OK" "$OUTPUT")
	assertTrue "'JSLintr should show OK" "[ $HAS_STARTING ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Done!" "$OUTPUT")
	assertTrue "'JSLintr closed ok" "[ $HAS_DONE ]"
}

test_jslintr_should_work_with_a_single_file_with_errors () {

	local OUTPUT=$(_jslintr "$FIXTURES/js_sample_error.js $FIXTURES/jslintoptions")

	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_FAIL=$(has_pattern_in_string "FAIL" "$OUTPUT")
	assertTrue "'JSLintr should show FAIL message" "[ $HAS_FAIL ]"
	
	local HAS_FILENAME=$(has_pattern_in_string "\/js_sample_error\.js" "$OUTPUT")
	assertTrue "'JSLintr should filename" "[ $HAS_FILENAME ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Done!" "$OUTPUT")
	assertTrue "'JSLintr closed ok" "[ $HAS_DONE ]"
}

test_jslintr_should_work_with_a_single_file_with_errors_in_verbose_mode () {

	local OUTPUT=$(_jslintr --verbose -o $FIXTURES/jslintoptions $FIXTURES/js_sample_error.js)
    # echo "=========="
    # echo $OUTPUT
    # echo "=========="

	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_FAIL=$(has_pattern_in_string "FAIL" "$OUTPUT")
	assertTrue "'JSLintr should show FAIL message" "[ $HAS_FAIL ]"
	
	local HAS_FILENAME=$(has_pattern_in_string "\/js_sample_error\.js" "$OUTPUT")
	assertTrue "'JSLintr should filename" "[ $HAS_FILENAME ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Done!" "$OUTPUT")
	assertTrue "'JSLintr should closed ok: >>>>> $OUTPUT <<<<<" "[ $HAS_DONE ]"
}

test_jslintr_should_work_in_directories () {

	local OUTPUT=$(_jslintr "$FIXTURES $FIXTURES/jslintoptions")
    # echo "=========="
    # echo $OUTPUT
    # echo "=========="
	
	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_FAIL=$(has_pattern_in_string "FAIL" "$OUTPUT")
	assertTrue "'JSLintr should show FAIL message," "[ $HAS_FAIL ]"
	
	local HAS_FILENAME=$(has_pattern_in_string "tests\/fixtures\/js_sample_error.js" "$OUTPUT")
	assertTrue "'JSLintr should show error file name" "[ $HAS_FILENAME ]"
	
	local HAS_COUNTER=$(has_pattern_in_string "3\ errors\ found" "$OUTPUT")
	assertTrue "'JSLintr should show FAIL counter message," "[ $HAS_COUNTER ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Complete: 2 tests done!" "$OUTPUT")
	assertTrue "'JSLintr closed ok" "[ $HAS_DONE ]"
}

test_jslintr_should_print_results_when_work_in_directories () {

	local OUTPUT=$(_jslintr "-o $FIXTURES/jslintoptions $FIXTURES")
    # echo "=========="
    # echo $OUTPUT
    # echo "=========="
    
    local HAS_FAILS=$(has_pattern_in_string "1 failed" "$OUTPUT")
    assertTrue "'JSLintr should print fails count" "[ $HAS_FAILS ]"
    
    local HAS_PASS=$(has_pattern_in_string "1 passed" "$OUTPUT")
    assertTrue "'JSLintr should print pass count" "[ $HAS_PASS ]"
}

test_jslintr_should_generate_tap_file_without_name () {
    local OUTPUT=$(_jslintr --tap tests\/fixtures\/ $FIXTURES)
    
    local FILE_EXISTS=$( [ -f tests/fixtures/jslintr.tap ] && echo 1 )
    assertTrue "'JSLintr should generate TAP file even if name is not specified," "[ $FILE_EXISTS ]"
}

test_jslintr_should_generate_tap_file () {
    local OUTPUT=$(_jslintr --tap tests\/fixtures\/test_jslintr.tap $FIXTURES)
    local TAP=$(cat tests\/fixtures\/test_jslintr.tap)
    
    # echo "=========="
    # echo $TAP
    # echo "=========="
    
    local HAS_TAP_VERSION=$(has_pattern_in_string "TAP version 13" "$TAP")
    assertTrue "'JSLintr should generate TAP file with version," "[ $HAS_TAP_VERSION ]"
    
    local HAS_TOTAL=$(has_pattern_in_string "1..2" "$TAP")
    assertTrue "'JSLintr should generate TAP file with count header," "[ $HAS_TOTAL ]"
    
    local HAS_FILE1=$(has_pattern_in_string "not ok 1 - $FIXTURES/js_sample_error.js" "$TAP")
    assertTrue "'TAP file should show fail," "[ $HAS_FILE1 ]"
    
    local HAS_FILE2=$(has_pattern_in_string "ok 2 - $FIXTURES/js_sample_ok.js" "$TAP")
    assertTrue "'TAP file should show success," "[ $HAS_FILE2 ]"
}

. tests/bin/shunit2