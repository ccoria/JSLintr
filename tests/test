#!/usr/bin/env bash

export JSLINTR_ROOT=${JSLINTR_ROOT:-$(pwd -P)}
export JSLINTR_SRC="$JSLINTR_ROOT/src/"
export FIXTURES=${JSLINTR_ROOT}/tests/fixtures
export JSLINTR="/tmp/_jslintr/jslintr"

function _jslintr () {
	local PARAMS="$@"
	local OUT=$($JSLINTR $PARAMS)
	
	echo $OUT
}

function has_pattern_in_string () {
	local PATTERN=${1}
	local STRING=${2}
	
	local RES=$(echo $STRING | grep -q "$PATTERN" && echo 1)
	
	echo $RES
}

export USAGE_MESSAGE="usage: jslintr \[\-v\|\-\-verbose\] target_path"
test_jslintr_should_show_usage_when_called_without_params () {

	local OUTPUT=$(_jslintr)
	local RESULT=$(has_pattern_in_string "$USAGE_MESSAGE" "$OUTPUT")
	assertTrue "'JSLintr should show usage when called without parameters" "[ $RESULT ]"
}

test_jslintr_should_show_usage_when_called_without_target () {
	
	local OUTPUT=$(_jslintr -v)
	local RESULT=$(has_pattern_in_string "$USAGE_MESSAGE" "$OUTPUT")
	assertTrue "'JSLintr should show usage when called without parameters" "[ $RESULT ]"
	
	local OUTPUT=$(_jslintr --verbose)
	local RESULT=$(has_pattern_in_string "$USAGE_MESSAGE" "$OUTPUT")
	assertTrue "'JSLintr should show usage when called without parameters" "[ $RESULT ]"
}

test_jslintr_should_work_with_a_single_file () {

	local OUTPUT=$(_jslintr "$FIXTURES/js_sample_ok.js $FIXTURES/jslintoptions")
	
	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Done!" "$OUTPUT")
	assertTrue "'JSLintr closed ok" "[ $HAS_DONE ]"
}

test_jslintr_should_work_with_a_single_file_in_verbose_mode () {

	local OUTPUT=$(_jslintr -v "$FIXTURES/js_sample_ok.js $FIXTURES/jslintoptions")
    # echo "=========="
    # echo $OUTPUT
    # echo "=========="
	
	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_STARTING=$(has_pattern_in_string "tests\/fixtures\/js\_sample\_ok\.js\:" "$OUTPUT")
	assertTrue "'JSLintr should show success file" "[ $HAS_STARTING ]"
	
	local HAS_STARTING=$(has_pattern_in_string "OK" "$OUTPUT")
	assertTrue "'JSLintr should show OK" "[ $HAS_STARTING ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Done!" "$OUTPUT")
	assertTrue "'JSLintr closed ok" "[ $HAS_DONE ]"
}

test_jslintr_should_work_with_a_single_file_with_errors () {

	local OUTPUT=$(_jslintr "$FIXTURES/js_sample_error.js $FIXTURES/jslintoptions")

	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_FAIL=$(has_pattern_in_string "FAIL" "$OUTPUT")
	assertTrue "'JSLintr should show FAIL message" "[ $HAS_FAIL ]"
	
	local HAS_FILENAME=$(has_pattern_in_string "\/js_sample_error\.js" "$OUTPUT")
	assertTrue "'JSLintr should filename" "[ $HAS_FILENAME ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Done!" "$OUTPUT")
	assertTrue "'JSLintr closed ok" "[ $HAS_DONE ]"
}

test_jslintr_should_work_with_a_single_file_with_errors_in_verbose_mode () {

	local OUTPUT=$(_jslintr --verbose "$FIXTURES/js_sample_error.js $FIXTURES/jslintoptions")
	# echo "=========="
    # echo $OUTPUT
    # echo "=========="

	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_FAIL=$(has_pattern_in_string "FAIL" "$OUTPUT")
	assertTrue "'JSLintr should show FAIL message" "[ $HAS_FAIL ]"
	
	local HAS_FILENAME=$(has_pattern_in_string "\/js_sample_error\.js" "$OUTPUT")
	assertTrue "'JSLintr should filename" "[ $HAS_FILENAME ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Done!" "$OUTPUT")
	assertTrue "'JSLintr closed ok" "[ $HAS_DONE ]"
}

test_jslintr_should_work_in_directories () {

	local OUTPUT=$(_jslintr "$FIXTURES $FIXTURES/jslintoptions")
    # echo "=========="
    # echo $OUTPUT
    # echo "=========="
	
	local HAS_STARTING=$(has_pattern_in_string "Starting JSLintr." "$OUTPUT")
	assertTrue "'JSLintr started ok" "[ $HAS_STARTING ]"
	
	local HAS_FAIL=$(has_pattern_in_string "FAIL" "$OUTPUT")
	assertTrue "'JSLintr should show FAIL message," "[ $HAS_FAIL ]"
	
	local HAS_FILENAME=$(has_pattern_in_string "tests\/fixtures\/js_sample_error.js" "$OUTPUT")
	assertTrue "'JSLintr should show error file name" "[ $HAS_FILENAME ]"
	
	local HAS_COUNTER=$(has_pattern_in_string "3\ errors\ found" "$OUTPUT")
	assertTrue "'JSLintr should show FAIL counter message," "[ $HAS_COUNTER ]"
	
	local HAS_DONE=$(has_pattern_in_string "JSLintr Complete: 2 tests done!" "$OUTPUT")
	assertTrue "'JSLintr closed ok" "[ $HAS_DONE ]"
}

. bin/shunit2